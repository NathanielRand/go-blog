package models


import (
	"errors"

	"github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/postgres"
)

var (
	// ErrNotFound is returned when a resource cannot be found 
	// in the database.
	ErrNotFound = errors.New("models: resource not found")
	// ErrInvalidID is returned when an invalid ID is provided 
	// to a method like Delete.
	ErrInvalidID = errors.New("models: ID provided was invalid")
)

type User struct {
	gorm.Model
	Username string `gorm:"not null;unique"`
	Email string `gorm:"not null;unique_index"`
}

// UserService type to provide methods 
// to query, create and update users.
type UserService struct {
	db *gorm.DB
}

// NewUserService
func NewUserService(connectionInfo string) (*UserService, error) {
	// Connect to db via GORM.
	db, err := gorm.Open("postgres", connectionInfo)
	if err != nil {
		panic(err)
	}
	// Enable logmode.
	db.LogMode(true)
	// Return a UserService object.
	return &UserService{
		db: db,
	}, nil
}

// first will query using the provided gorm.DB and it will 
// get the first item returned and place it into dst. If
// nothing is found in the query, it will return ErrNotFound 
func first(db *gorm.DB, dst interface{}) error {
	err := db.First(dst).Error
	if err == gorm.ErrRecordNotFound {
		return ErrNotFound
	}
	return err 
}

// find will query using the provided gorm.DB and it will 
// returned all records and place it into dst. If
// nothing is found in the query, it will return ErrNotFound 
// func find(db *gorm.DB, dst interface{}) error {
// 	err := db.Find(dst).Error
// 	if err == gorm.ErrRecordNotFound {
// 		return ErrNotFound
// 	}
// 	return err 
// }

// Create will create a user and backfill data
// like the ID, CreatedAt, and UpdateAt fields.
func (us *UserService) Create(user *User) error {
	// Will return nil if successful, or error otherwise.
	// It doesn’t need to return a user object because it 
	// accepts a pointer to one and can instead just update the provided user.
	return us.db.Create(user).Error
}

// Update will update the provided user with all of the data 
// in the provided user object.
func (us *UserService) Update(user *User) error {
	return us.db.Save(user).Error
}

// Delete will delete the user with the provided ID
func (us *UserService) Delete(id uint) error {
	if id == 0 {
		return ErrInvalidID
	}
	user := User{Model: gorm.Model{ID: id}}
	return us.db.Delete(&user).Error
}

// ByID will look up a user with the provided ID.
// If the user is found, we will return a nil error
// If the user is not found, we will return ErrNotFound
func (us *UserService) ByID(id uint) (*User, error) {
	// user variable of type User.
	var user User
	// Query db for record with provided ID via gorm.
	db := us.db.Where("id = ?", id)
	// Pass the DB query and a pointer to the user to our 
	// first function and save any errors returned to a variable.
	err := first(db, &user)
	if err != nil {
		return nil, err
	}
	// Return the user if there aren’t and any errors.
	// Otherwise only return the error.
	return &user, nil
}

// ByEmail looks up a user with the given email address and // returns that user.
// If the user is found, we will return a nil error
// If the user is not found, we will return ErrNotFound
// If there is another error, we will return an error with
// more information about what went wrong. This may not be
// an error generated by the models package.
func (us *UserService) ByEmail(email string) (*User, error) {
	var user User
	db := us.db.Where("email = ?", email) 
	err := first(db, &user)
	return &user, err
}

// Close method to close the UserService connection.
func (us *UserService) Close() error {
	return us.db.Close()
}

// AutoMigrate will attempt to automatically migrate the // users table
func (us *UserService) AutoMigrate() error {
	if err := us.db.AutoMigrate(&User{}).Error; err != nil {
		return err
	}
	return nil
}

// DestructiveReset drops the user table and rebuilds it
// *Should remove in production.
func (us *UserService) DestructiveReset() error { 
	err := us.db.DropTableIfExists(&User{}).Error
	if err != nil {
		return err
	} 
	return us.AutoMigrate()
}